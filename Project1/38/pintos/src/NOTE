정현이와 성철이의 신송판 ^_^
-- 11.26 --
in mlfqs-load-60.c
load_thread() 함수를 보면 sleep_time, spin_time, exit_time 이렇게 세 상수가 존재함.
sleep : 1000, spin : 7000, exit : 13000 이 나와야 해.(계산하여 보면은)
그런데 이것들을 프린트 해봣더니
sleep : 1000, spin : 0, exit : 7000 이 나옴.(spin 값이 잘못되니 exit 값도 틀려짐)
이로인해
while(timer_elapsed(start_timer) < spin_time)
			continue;
반복문 수행 없이 그냥 패스해버림
그후 timer_sleep(exit_time - ...) 에서도 올바르지 않은 값을 sleep 해버리고.
여기서 sleep 하는 시간이 차이가 나서
test 할 때 뭔가 어긋나는게 아닐까?
(웃긴건, 그래서 내가 아예 상수를 할당해보았는데도 (1000,7000,13000)
 spin, exit 값이 틀림



-- 11.25 --

1. waiting time으로 block하고 timer_go()에서 unblock()할때 main으로 계속 진행되는 것?
   그러나 round-robbin 켜도 잘 안되는 것 보니까(main에서 다른 thread로 바뀐다? sema에서는 왜 안 바뀌었을까?) 이게 이유가 아닌가?
	 현재 main , thread 60개 PRI_DEFAULT 로 priority가 다 같은 상태 
	 아 잘모르겠다. 생각좀 해바랑
\
2. 계산식의 오류문제 60이라는 ready_list 수가 포함되어도 그렇게 높은 dumping이 일어나면 안되는 것이었다는 성철이의 가설.
   그러면 계산식을 바꾸어야하나? 다 해봤는데 안되는거 아닌가? 완성한 아이들의 ready_list의 수 찍어본것하고 비교해보면 
	 괜찮을것같은데


나 이따가 밤에 해볼께. 잘 하구 있으렴 bye! 
-사랑해 성철아 -


-- 11. 23 --



FAIL tests/threads/mlfqs-load-1
FAIL tests/threads/mlfqs-load-60
FAIL tests/threads/mlfqs-load-avg
FAIL tests/threads/mlfqs-recent-1
pass tests/threads/mlfqs-fair-2
pass tests/threads/mlfqs-fair-20
FAIL tests/threads/mlfqs-nice-2
FAIL tests/threads/mlfqs-nice-10
FAIL tests/threads/mlfqs-block






-- 11. 19 --

aging 해결
thread.c 에서
thread_aging():ready list를 쭉 돌면서 priority 값을 1씩 증가시켜줌.
			   우리가 매틱마다 이걸 실행하면 overload가 너무 크지 않은가 걱정해었는데, 이게 thread_tick이 4틱마다 실행되는 거여서 걱정 안해도 될것같아.



thread struct 에 
int originPri 를 추가했어
이 필드는 init_thread 에서 priority를 집어 넣을 때 같이 초기화 해줘.
나중에 priority가 바뀌어도 원래대로 돌아올 때 참고하려고 한거야.
저번에 함수 내에서 지역변수 선언해서 하자고 했잖아.
근데 내가 sema가 쓰이는 위치를 정확히 몰라서 그렇게 못했음.
나중에 이렇게 바꿔주면 될 듯.

threads/synch.c
여기에 세 함수를 추가했음.
sema_down_donate() : sema_down 베이스는 같은데, sema->waiters에서
					 가장 큰 priority 값을 찾은 다음 그 값과 현재 
					쓰레드의 priority를 비교해서 더 큰 값으로 바꿔줌
sema_up_donate() : sema_up과 베이스는 같은데, thread의 priority를
				   originPri로 바꿔줌. 즉 원래 priority로 되돌려주는 역할.
int getMaxPri() : 이건 sema_down_donate()에서 사용하는데, 야
				  매개변수로 sema->waitors를 넘기면 이 리스트에서 
				  가장 큰 priority 값을 찾아서 이 값만 리턴해주는 함수.

함수는 다 구현 했는데, sema를 정확히 어디서 호출하는 지를 몰라서
sema를 donate 로 못바꿔줬어.
보니까 thread_start에서만 sema를 호출하더라고.
이전에 lock으로 구현해준 곳을 sema_donate로 바꿔줘야 하는건가?

	





-- 11. 18 -- 

testcase보면
donate 구현하는거랑 mlfqs 구현하는거랑 다른거아니냐?

그 진주라는 아이말이 donate를 구현하면 mlfqs까지 pass뜬댔는데
아닌것같은데??

-- 11. 17 ~ 18 -- 
 
게시판에 올라온 test 파일로 업데이트 해서 make check 했음
오른쪽에 순서 매겨논게 이번에 통과해야할 pass들

alarm-simultaneous는 조금 더 살펴봐야 할듯
priority-sema 는 멀티레벨큐로 계산하는거 구현해야 할 듯
priority-aging 은 ppt 자료 보고 세팅은 해놨고, thread에 thread_aging()함수 구현하면 될 듯
priority-lifo 도 멀티레벨큐로 계산하게 구현.

수고 ^_^

< 완료 목록 > (11.18자 수정)
pass tests/threads/alarm-single             ///1
pass tests/threads/alarm-multiple           ///2
pass tests/threads/alarm-simultaneous       ///3 
pass tests/threads/alarm-priority           ///4
pass tests/threads/alarm-zero               ///5
pass tests/threads/alarm-negative           ///6
pass tests/threads/priority-change          ///7
pass tests/threads/priority-change-2        ///8
FAIL tests/threads/priority-donate-one
FAIL tests/threads/priority-donate-multiple
FAIL tests/threads/priority-donate-multiple2
FAIL tests/threads/priority-donate-nest
FAIL tests/threads/priority-donate-sema
FAIL tests/threads/priority-donate-lower
pass tests/threads/priority-fifo            ///9
pass tests/threads/priority-preempt         ///10
pass tests/threads/priority-sema            ///11
pass tests/threads/priority-aging           ///12
FAIL tests/threads/priority-condvar
FAIL tests/threads/priority-donate-chain
FAIL tests/threads/mlfqs-load-1
FAIL tests/threads/mlfqs-load-60
FAIL tests/threads/mlfqs-load-avg
FAIL tests/threads/mlfqs-recent-1
pass tests/threads/mlfqs-fair-2
pass tests/threads/mlfqs-fair-20
FAIL tests/threads/mlfqs-nice-2
FAIL tests/threads/mlfqs-nice-10
FAIL tests/threads/mlfqs-block
priority-lifo								///13
17 of 29 tests failed.



-- 11. 16 --

sleep : 이거는 리스트를 다룰 때 문제가 있는 듯 하다.
일단은 timer.c 에서 timer_sleep()함수에서
list_push_type 으로 하면, timer_go() 안에서 main 쓰레드를 wake up 할 때 커널 패닉이 뜸
혹시나 해서 list_push_back 으로 wakeUpTime 무시하고 sleep_list에 집어 넣었더니
이번에는 thread 4 를 wake up 할 때 커널패닉이 뜸. 이거는 리스트를 조금 분석해보면서 해야할 듯

<F4>
그리고 ready_list 에 쓰레드를 삽입하는 부분이
thread_unblock() 말고도 thread_yield() 함수에서도 집어넣더라고.
여기에도 우리가 만든 list_push_type()을 넣어야 할 것 같아.

그리고, 한가지 아이디어가 생겼는데(by 민균)
우리는 지금 ready_list에 priority를 정렬해서 삽입하고 있잖아.
그런데, thread.c 안에
next_thread_to_run()함수를 보면,
이 함수가 ready_list 에 있는 쓰레드를 꺼내서 실행시키는 역할을 해.
따라서 여기서 꺼낼 때, priority가 가장 높은 쓰레드를 꺼내게 해도 될것 같아.
어떤방식을 선택할 지는 내일 얘기해보장




ready_list에 thread 삽입 하는 부분
- thread_unblock, thread_yield

--------------

나도 조금 만지려고 했는데 
국제정치경제론 팀플 자료 찾아보느라 시간 다 까먹는다 ㅠㅠ


-- 11.15 --

alarm-wait.c in tests

여기서 sleeper라는 함수에 thread 4 가 안들어감
안들어가면 output이라는 변수가 업데이트가 안되게되고 
이러면 iteration이라는 변수의 값이 업데이트가 안되기때문에 테스트 통과 x

thread_create ( .. , sleeper, t) 라고 호출하니까 
thread_create를 호출하는 시간안에서 (thread4를 생성하는 도중) 
unblock함수가 호출되기때문에 중간에 stop이 된것같은데 이건 내일 알아봐야겠다.

--



-- 11.14 18:50 --

일단은 2번 구현해놨다

list_push_types 라고해서 세번째 인자가 priority와 wakeuptime을 구분해 
이건 보면 알꺼야 두개가 용도가 비슷한데 따로 함수만들필요없을것같아서

내용보면 밑에 알고리즘이랑 똑같아
다만 안돌아간다는게 문제지 ㅡ,.ㅡ 

돌려보니까 제대로 list에 삽입이 안된것같은데 살펴봐야할것같아

수정. time_go() , timer_sleep() in timer.c
      list_push_types() in list.c

-- 11.14 --
project 3
1. alarm clock - > 좀만 더 해보자

2. single ready queue 
thread_unblock 에서 ready list에 삽입할 때
list_push_priority()를 이용하 삽입
list_push_priority()는 ready list에서
priority를 비교하여 적절한 위치를 찾고,
list_insert()로 삽입

3.donation
sync.c 에서 sema_up_priority, sema_down_priority 를 구현한다.
그러면 이전에 sema_up, sema_down 콜 한곳을 다 
이 sema_up/down_priority로 바꿔줘야겠찌?
이함수에서 list_push_priority()를 이용해 sema_waitors를
priority에 따라 리스트를 구현한다.

4.BSD scheduler - > 나중에

c.f 


list_push_priority {


struct thread *t = thread_current();
int is_end = 1;


if(!empty){
	for( list loop){
		struct thread *t__ = list_entry( .. );
			
			if(t->priority > t__->priority){
					list_insert();
					is_end = 0;
					break;
			}	

	}
}
else{
	list_push_back(); // 
}

if(is_end){
	list_push_back();	
}


}


-- 11.14 --

Project 3

i revised thread.c , timer.c , thread.h for implementing alarm-clock.
it is purpose that time_sleep is maked as busywaiting mechanism change to block-unblock mechanism.  i did it. but mistery error occur. 
e.g KERNEL PANIC, assertion error .. 
i tested it using alarm-single file in tests/threads
it is maybe time problem enouph amount of time not flowed
thread 0 ~ 4 SUCESSFULLY passed! but suddenly display FAIL at last 
you test that and recognize that. find corrent answer plz
bye~ 

--- 11.06 ---

우리가 짠 busy waiting에 문제가있는것같아서
이거 mutexlock으로 다 바꿨는데
kernel PANIC 뜬다.

아직 다시 수정안한상태 ( thread.c/ thread.h/ syscall.c/ process.c)

multi-recurse 라는거 3번째 child만 exit(3)이 안뜬다고했는데
그앞에 printf넣으면 또 뜬다.
printf 넣어야만 되는경우가 지금까지 계속 있어온만큼 이것좀해결하고싶은데..



--- 11.05 ---

read-normal
read-bad-ptr
read-boundary
write-boundary

이것들 왜안되는지 모르겠다

아니 분명 각각으로 실행시키면 잘되는데

make check만 실행하면 뻑나네 

239byte가 떠야하는데 계속 8byte만 읽어들어와져 
write-boundary도 그래 8byte만 읽혀져

그래서 내가 생각하기엔 이 뭐같은 상황이 synch를 안해서그런가싶기도한데
좀 짜증나네 끙..

이 외에도 filesize seek에 있는 return 0으로되어있던거 제대로 해주니까 몇개 더 되서 12개만 fail인상태

일단 넘어가고 synch좀 해볼께

synch 완료

현재 원인파악안되는 것. 

- 저 위에있는 read/write

- multi-recurse 라는 child여러개만들어서 돌리는게 있는데 

  15개 child를 돌리는데 하필 3번째 child만 exit(3)이 안뜸.

  debugging 해봐야할듯

- rox series -> 아직 해보지도않음.


--- 11.05 12:17 ---
현재 fail 뜨는 테스트 목록
create-null  //해결 12:48
close-twice  //해결 13:00
read-normal
read-bad-ptr
read-boundary
write-boundary





--- 11.05 01:37 ---

정현이 신송 확인


--- 11.05 01:17 ---
오늘은 좀 많음
일단 우리가 전역으로 선언한 gFd랑,
그거에 쓰이는 fd_list가 필요가 없어졌음.
구조체는 남겨두긴 했는데 지워두 될 듯.
그리고 쓰레드에 들어갈 fdSet 에 파일포인터를 추가했어.
이에 따라 thread_init에 초기화 해줬고
오픈도 수정함. 이전에 짜논거는 malloc을 안해놔서 작동을 안했던것임.
그외에 seek, tell, size, close 는 fd에 따라 리스트 탐색해서
찾도록 구현했음.

앞으로 할 거는 open null, close twice 같은 예외 처리하고
synchronization, deny write 하면 될 것 같다
그럼 수고




--- 11.04  14:41 ---

#이정현 신송확인 

--- 11.03  23:30 ---
메이크 체크 돌려봤는데
open-normal
open-boundary
open-null
open-twic 
fail 뜸.
오픈 업데이트랑 쓰레드 부분에서 fd 값에 gFd.fd_cnt+2를 넣었던데
보니까 위에서 fd_cnt를 이미 1개 증가시켰으므로 +1만 해주면
될 것같아서 수정함. 그리고 open의 리턴값이 없어서
fd에 값 할당 해주고 리턴 시켰는데도 fail 뜸 ㅠㅠ


-------------

thread에 가져다 넣었고.
전역변수도 다 했는데 
즉, open 함수 완료

체크 안해봄 >ㅅ<

아 근데 .. 아직도 헷갈리는게 
구조체로 작업할때 보통 -> 이거 쓰잖아 
근데 상황이 안되면 . 쓸수도 있는거아닌가?
왜 우리가 보는 전문가들 코드는 . 이거 하나도 없고 다 -> 이거일까?
여기서는 malloc도 못써서 그냥 . 으로함 

--- 11.03 ---
정리한 것
1. 전역변수로 fd_list 만듦

struct file_dstor{
 int fd_count;
 struct list list_fd;
}

struct fd_elem{ 
  list_elem elem;
  int fd;
  struct file* fp;
}

struct fdSet_elem{
 list_elem elem;
 int fd;
}

thread{

 struct list list_fdSet;

}

이후에 syscall은 파일 포인터 가져다 쓰기만 하면 됨.

synchronization
write랑 read에 걸어준다.
busy-waiting으로 구현해보고
나중에 lock이나 semaphore로 구현

deny-write
process_exec 할 때
fdSet에 있는 fd들 다 돌면서
deny write 걸어준다.

process_exit 할 때
fdSet에 있는 fd들 다 돌면서
allow_write 걸어준다.

끝
--- **** ---
